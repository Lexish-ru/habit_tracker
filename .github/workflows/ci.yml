name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres -d test_db"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      SECRET_KEY: dummy-ci-only
      DJANGO_SETTINGS_MODULE: habits_project.settings
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f poetry.lock ]; then pip install poetry && poetry config virtualenvs.create false && poetry install --no-interaction --no-ansi; else pip install -r requirements.txt; fi
      - name: Flake8
        run: flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres -d test_db"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20

    env:
      DJANGO_SETTINGS_MODULE: habits_project.settings
      SECRET_KEY: dummy-ci-only
      POSTGRES_DB: test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: "5432"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f poetry.lock ]; then
            pip install poetry && poetry config virtualenvs.create false && poetry install --no-interaction --no-ansi
          else
            pip install -r requirements.txt
          fi

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U postgres -d test_db; do
            echo "waiting for postgres"; sleep 2
          done

      - name: Migrate
        run: python manage.py migrate --noinput

      - name: Run tests
        run: python manage.py test


  image-smoke:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build -t app/backend:ci -f Dockerfile .
      - name: Compose up (db+redis+backend)
        run: |
          cat > docker-compose.ci.yml <<'YAML'
          services:
            db:
              image: postgres:16
              environment:
                POSTGRES_DB: app
                POSTGRES_USER: app
                POSTGRES_PASSWORD: app
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U app -d app"]
                interval: 5s
                timeout: 3s
                retries: 20
            redis:
              image: redis:7
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 5s
                timeout: 3s
                retries: 20
            backend:
              image: app/backend:ci
              environment:
                DJANGO_SETTINGS_MODULE: habits_project.settings
                POSTGRES_DB: app
                POSTGRES_USER: app
                POSTGRES_PASSWORD: app
                POSTGRES_HOST: db
                POSTGRES_PORT: "5432"
                REDIS_URL: redis://redis:6379/0
              depends_on:
                db:
                  condition: service_healthy
                redis:
                  condition: service_healthy
              healthcheck:
                test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8000/api/public-habits/|| exit 1"]
                interval: 5s
                timeout: 3s
                retries: 30
          YAML
          docker compose -f docker-compose.ci.yml up -d

      - name: Run migrations inside backend container
        run: |
          cid=$(docker compose -f docker-compose.ci.yml ps -q backend)
          docker exec "$cid" python manage.py migrate --noinput


      - name: Wait backend healthy
        run: |
          for i in {1..60}; do
            cid=$(docker compose -f docker-compose.ci.yml ps -q backend)
            st=$(docker inspect --format='{{.State.Health.Status}}' "$cid" 2>/dev/null || echo starting)
            [ "$st" = "healthy" ] && echo "healthy" && exit 0
            sleep 1
          done
          docker compose -f docker-compose.ci.yml logs backend
          exit 1
      - name: Smoke /
        run: |
          cid=$(docker compose -f docker-compose.ci.yml ps -q backend)
          docker exec "$cid" sh -lc "apk add curl 2>/dev/null || true; curl -fsS http://127.0.0.1:8000/api/public-habits/ || exit 1"

  deploy:
    runs-on: ubuntu-latest
    needs: image-smoke

    steps:
      - name: Deploy over SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}
            set -euo pipefail
            cd ${{ secrets.DEPLOY_DIR }}
  
            # показать версии для диагностики
            docker --version || true
            docker-compose --version || true
  
            # аккуратная чистка старых контейнеров проекта (без трогания volumes)
            docker-compose down --remove-orphans || true
  
            # обновить образы и пересоздать контейнеры начисто
            docker-compose pull || true
            docker-compose up -d --build --force-recreate --remove-orphans
  
            # быстрая проверка, что всё встало
            docker-compose ps
          '
