name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:

jobs:
  lint-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres -d test_db"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      SECRET_KEY: dummy-ci-only
      DJANGO_SETTINGS_MODULE: habits_project.settings
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f poetry.lock ]; then pip install poetry && poetry config virtualenvs.create false && poetry install --no-interaction --no-ansi; else pip install -r requirements.txt; fi
      - name: Flake8
        run: flake8 .
      - name: Migrate
        run: python manage.py migrate --noinput
      - name: Tests
        run: pytest -q || true

  image-smoke:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build -t app/backend:ci -f Dockerfile .
      - name: Compose up (db+redis+backend)
        run: |
          cat > docker-compose.ci.yml <<'YAML'
          services:
            db:
              image: postgres:16
              environment:
                POSTGRES_DB: app
                POSTGRES_USER: app
                POSTGRES_PASSWORD: app
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U app -d app"]
                interval: 5s
                timeout: 3s
                retries: 20
            redis:
              image: redis:7
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 5s
                timeout: 3s
                retries: 20
            backend:
              image: app/backend:ci
              environment:
                DJANGO_SETTINGS_MODULE: habits_project.settings
                POSTGRES_DB: app
                POSTGRES_USER: app
                POSTGRES_PASSWORD: app
                POSTGRES_HOST: db
                POSTGRES_PORT: "5432"
                REDIS_URL: redis://redis:6379/0
              depends_on:
                db:
                  condition: service_healthy
                redis:
                  condition: service_healthy
              healthcheck:
                test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8000/health || exit 1"]
                interval: 5s
                timeout: 3s
                retries: 30
          YAML
          docker compose -f docker-compose.ci.yml up -d
      - name: Wait backend healthy
        run: |
          for i in {1..60}; do
            cid=$(docker compose -f docker-compose.ci.yml ps -q backend)
            st=$(docker inspect --format='{{.State.Health.Status}}' "$cid" 2>/dev/null || echo starting)
            [ "$st" = "healthy" ] && echo "healthy" && exit 0
            sleep 1
          done
          docker compose -f docker-compose.ci.yml logs backend
          exit 1
      - name: Smoke /
        run: |
          cid=$(docker compose -f docker-compose.ci.yml ps -q backend)
          docker exec "$cid" sh -lc "apk add curl 2>/dev/null || true; curl -fsS http://127.0.0.1:8000/ || exit 1"

  deploy:
    runs-on: ubuntu-latest
    needs: image-smoke
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy over SSH
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          DEPLOY_DIR: ${{ secrets.DEPLOY_DIR }}
        run: |
          ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "
            set -euo pipefail
            cd '$DEPLOY_DIR'
            if docker compose version >/dev/null 2>&1; then
              docker compose pull || true
              docker compose up -d --build
            else
              docker-compose pull || true
              docker-compose up -d --build
            fi
          "
